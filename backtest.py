{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN/dpuolaVVHy8IP5hjXejx",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ShijieXu1993/SOR_backtest/blob/main/backtest.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 150,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 480
        },
        "id": "35Ydre9saqvF",
        "outputId": "7c2f8838-2cbd-44d1-ca09-2a38bcb2cbbe"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved JSON output to execution_summary.json\n"
          ]
        }
      ],
      "source": [
        "# Static Cont-Kukanov split across N venues (single snapshot)\n",
        "\n",
        "# Inputs\n",
        "#   order_size  – target shares to buy (e.g. 5_000)\n",
        "#   venues      – list of objects, one per venue, each with:\n",
        "#                 .ask  .ask_size  .fee  .rebate\n",
        "#   λ_over      – cost penalty per extra share bought\n",
        "#   λ_under     – cost penalty per unfilled share\n",
        "#   θ_queue     – queue-risk penalty (linear in total mis-execution)\n",
        "#\n",
        "# Outputs\n",
        "#   best_split  – list[int]  shares sent to each venue (len == N)\n",
        "#   best_cost   – float      total expected cost of that split\n",
        "\n",
        "#-------------Packages & Library------------------------------\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import json\n",
        "from datetime import datetime, timedelta\n",
        "\n",
        "#----------------Functions--------------------------------------\n",
        "# Trading Cost\n",
        "def compute_cost(split, venues, order_size, lambda_o, lambda_u, theta):\n",
        "    executed = 0\n",
        "    cash_spent = 0\n",
        "    for i in range(0,len(venues)): # i is the information of time t in different venues\n",
        "        exe = min(split[i], venues[i]['ask_size'])\n",
        "        executed += exe\n",
        "        cash_spent += exe * (venues[i]['ask'] + venues[i]['fee'])\n",
        "        maker_rebate = max(split[i] - exe, 0) * venues[i]['rebate']     # why the rebate is calculated based on unexecuted size?\n",
        "        cash_spent -= maker_rebate\n",
        "\n",
        "    underfill = max(order_size-executed, 0)\n",
        "    overfill  = max(executed-order_size, 0)\n",
        "    risk_pen  = theta * (underfill + overfill)\n",
        "    cost_pen  = lambda_u * underfill + lambda_o * overfill\n",
        "    return cash_spent + risk_pen + cost_pen\n",
        "\n",
        "#allocater\n",
        "def allocate(order_size, venues, lambda_o, lambda_u, theta):\n",
        "    step = 100\n",
        "    splits = [[]]\n",
        "\n",
        "    for v in range(len(venues)):\n",
        "        new_splits = []\n",
        "        for alloc in splits:\n",
        "            used = sum(alloc)\n",
        "            max_v = min(order_size - used, venues[v]['ask_size'])\n",
        "            for q in range(0, int(max_v) + 1, step):\n",
        "                new_splits.append(alloc + [q])\n",
        "        splits = new_splits\n",
        "\n",
        "    best_cost = float('inf')\n",
        "    best_split = []\n",
        "    for alloc in splits:\n",
        "        executed = sum(alloc)\n",
        "        if executed == 0:\n",
        "            continue  # skip no-trade allocations\n",
        "\n",
        "        cost = compute_cost(alloc, venues, executed, lambda_o, lambda_u, theta)\n",
        "        if cost < best_cost:\n",
        "            best_cost = cost\n",
        "            best_split = alloc\n",
        "\n",
        "    return best_split, best_cost\n",
        "\n",
        "#----------------------BASELINE MODELS-------------------------------------\n",
        "\n",
        "# Best Ask Strategy\n",
        "def best_ask_everyXs(\n",
        "        snapshots,\n",
        "        timestamps,            # ← one timestamp per snapshot\n",
        "        total_order_size,\n",
        "        lambda_o,\n",
        "        lambda_u,\n",
        "        theta,\n",
        "        min_gap              # seconds between fills\n",
        "):\n",
        "    \"\"\"\n",
        "    consecutive executions are ≥ min_gap seconds apart.\n",
        "    \"\"\"\n",
        "    remaining_order  = total_order_size\n",
        "    total_cost       = 0.0\n",
        "    total_executed   = 0\n",
        "    execution_log    = []\n",
        "\n",
        "    last_exec_time   = None                 # no trade yet\n",
        "\n",
        "    for t, (venue, ts) in enumerate(zip(snapshots, timestamps)):\n",
        "        alloc = [0] * len(venue)\n",
        "        if remaining_order <= 0:\n",
        "            break\n",
        "\n",
        "        # rate-limit: skip until ≥ min_gap seconds have elapsed\n",
        "        if last_exec_time is not None and (ts - last_exec_time).total_seconds() < min_gap:\n",
        "            continue\n",
        "\n",
        "        # choose the venue with the best ask\n",
        "        best_id   = min(range(len(venue)), key=lambda i: venue[i]['ask'])\n",
        "        best_size = venue[best_id]['ask_size']\n",
        "        executed  = min(remaining_order, best_size)\n",
        "        if executed == 0:\n",
        "            continue\n",
        "\n",
        "        alloc[best_id] = executed\n",
        "\n",
        "        cost = compute_cost(alloc, venue, executed,\n",
        "                            lambda_o, lambda_u, theta)\n",
        "\n",
        "        # book the fill\n",
        "        total_cost      += cost\n",
        "        total_executed  += executed\n",
        "        remaining_order -= executed\n",
        "        last_exec_time   = ts                # reset the timer\n",
        "\n",
        "        execution_log.append({\n",
        "            'snapshot' : t,\n",
        "            'time'     : ts,\n",
        "            'alloc'    : alloc,\n",
        "            'executed' : executed,\n",
        "            'remaining': remaining_order,\n",
        "            'cost'     : cost\n",
        "        })\n",
        "\n",
        "    avg_fill_price = (total_cost / total_executed) if total_executed else None\n",
        "    return execution_log, total_cost, avg_fill_price\n",
        "\n",
        "\n",
        "# TWAP Strategy\n",
        "def twap(snapshots, timestamps, total_order_size, lambda_o, lambda_u, theta, bucket_seconds=60):\n",
        "    \"\"\"\n",
        "    Improved TWAP: Uniformly splits order over time buckets,\n",
        "    allows partial fills, and carries over unfilled amounts.\n",
        "    \"\"\"\n",
        "    if not snapshots or not timestamps:\n",
        "        return [], 0.0, None\n",
        "\n",
        "    start_time = timestamps[0]\n",
        "    end_time = timestamps[-1]\n",
        "    total_seconds = (end_time - start_time).total_seconds()\n",
        "    num_buckets = int(total_seconds // bucket_seconds) + 1\n",
        "\n",
        "    shares_per_bucket = total_order_size // num_buckets\n",
        "    leftover = total_order_size - shares_per_bucket * num_buckets\n",
        "\n",
        "    remaining_order = total_order_size\n",
        "    total_cost = 0.0\n",
        "    total_executed = 0\n",
        "    execution_log = []\n",
        "    bucket_tracker = [0] * num_buckets  # allow reuse of buckets\n",
        "\n",
        "    for t, (snapshot, ts) in enumerate(zip(snapshots, timestamps)):\n",
        "        if remaining_order <= 0:\n",
        "            break\n",
        "\n",
        "        bucket_idx = int((ts - start_time).total_seconds() // bucket_seconds)\n",
        "        bucket_idx = min(bucket_idx, num_buckets - 1)\n",
        "\n",
        "        # Skip if already attempted too many times (e.g., 1 try per second in a bucket)\n",
        "        if bucket_tracker[bucket_idx] > 3:\n",
        "            continue\n",
        "        bucket_tracker[bucket_idx] += 1\n",
        "\n",
        "        shares_to_buy = shares_per_bucket\n",
        "        if bucket_idx == num_buckets - 1:\n",
        "            shares_to_buy += leftover  # absorb total remainder at the end\n",
        "\n",
        "        alloc = [0] * len(snapshot)\n",
        "        executed = 0\n",
        "\n",
        "        for i, venue in enumerate(snapshot):\n",
        "            fill = min(venue['ask_size'], shares_to_buy - executed)\n",
        "            alloc[i] = fill\n",
        "            executed += fill\n",
        "            if executed >= shares_to_buy:\n",
        "                break\n",
        "\n",
        "        if executed == 0:\n",
        "            continue\n",
        "\n",
        "        # Carry forward leftover to next round\n",
        "        unfilled = shares_to_buy - executed\n",
        "        leftover += unfilled\n",
        "\n",
        "        cost = compute_cost(alloc, snapshot, executed, lambda_o, lambda_u, theta)\n",
        "        total_cost += cost\n",
        "        total_executed += executed\n",
        "        remaining_order -= executed\n",
        "\n",
        "        execution_log.append({\n",
        "            'snapshot': t,\n",
        "            'time': ts,\n",
        "            'bucket': bucket_idx,\n",
        "            'alloc': alloc,\n",
        "            'executed': executed,\n",
        "            'remaining': remaining_order,\n",
        "            'cost': cost\n",
        "        })\n",
        "\n",
        "    avg_fill_price = total_cost / total_executed if total_executed > 0 else None\n",
        "    return execution_log, total_cost, avg_fill_price\n",
        "\n",
        "\n",
        "# def twap(snapshots, timestamps, total_order_size, lambda_o, lambda_u, theta, bucket_seconds=60):\n",
        "#     start_time = timestamps[0]\n",
        "#     total_seconds = (timestamps[-1] - start_time).total_seconds()\n",
        "#     num_buckets = int(total_seconds // bucket_seconds) + 1\n",
        "\n",
        "#     shares_per_bucket = total_order_size // num_buckets\n",
        "#     remainder = total_order_size - shares_per_bucket * num_buckets\n",
        "\n",
        "#     remaining_order = total_order_size\n",
        "#     total_cost = 0\n",
        "#     total_executed = 0\n",
        "#     execution_log = []\n",
        "#     used_buckets = set()\n",
        "\n",
        "#     for t in range(len(snapshots)):\n",
        "#         if remaining_order <= 0:\n",
        "#             break\n",
        "\n",
        "#         bucket_idx = int((timestamps[t] - start_time).total_seconds() // bucket_seconds)\n",
        "#         if bucket_idx in used_buckets:\n",
        "#             continue\n",
        "\n",
        "#         snapshot = snapshots[t]\n",
        "#         shares_to_buy = shares_per_bucket + (remainder if bucket_idx == num_buckets - 1 else 0)\n",
        "\n",
        "#         alloc = [0] * len(snapshot)\n",
        "#         executed = 0\n",
        "\n",
        "#         for i, venue in enumerate(snapshot):\n",
        "#             buy_amt = min(venue['ask_size'], shares_to_buy - executed)\n",
        "#             alloc[i] = buy_amt\n",
        "#             executed += buy_amt\n",
        "#             if executed >= shares_to_buy:\n",
        "#               break\n",
        "\n",
        "#         if executed == 0:\n",
        "#             continue\n",
        "\n",
        "#         cost = compute_cost(alloc, snapshot, executed, lambda_o, lambda_u, theta)\n",
        "#         total_cost += cost\n",
        "#         total_executed += executed\n",
        "#         remaining_order -= executed\n",
        "\n",
        "#         used_buckets.add(bucket_idx)\n",
        "#         execution_log.append({\n",
        "#             'snapshot': t,\n",
        "#             'alloc': alloc,\n",
        "#             'executed': executed,\n",
        "#             'remaining': remaining_order,\n",
        "#             'cost': cost\n",
        "#         })\n",
        "\n",
        "#     avg_fill_price = total_cost / total_executed if total_executed > 0 else None\n",
        "#     return execution_log, total_cost, avg_fill_price\n",
        "\n",
        "\n",
        "\n",
        "def vwap(snapshots, total_order_size, lambda_o, lambda_u, theta):\n",
        "    \"\"\"\n",
        "    Execute order using VWAP: split each execution proportionally to ask sizes.\n",
        "    \"\"\"\n",
        "    remaining_order = total_order_size\n",
        "    total_cost = 0\n",
        "    total_executed = 0\n",
        "    execution_log = []\n",
        "\n",
        "    for t, snapshot in enumerate(snapshots):\n",
        "        if remaining_order <= 0:\n",
        "            break\n",
        "\n",
        "        total_ask_size = sum(v['ask_size'] for v in snapshot)\n",
        "        if total_ask_size == 0:\n",
        "            continue\n",
        "\n",
        "        alloc = [min(remaining_order * v['ask_size'] / total_ask_size, v['ask_size']) for v in snapshot]\n",
        "        alloc = [int(s) for s in alloc]\n",
        "        executed = sum(alloc)\n",
        "\n",
        "        if executed == 0:\n",
        "            continue\n",
        "\n",
        "        cost = compute_cost(alloc, snapshot, executed, lambda_o, lambda_u, theta)\n",
        "        total_cost += cost\n",
        "        total_executed += executed\n",
        "        remaining_order -= executed\n",
        "\n",
        "        execution_log.append({\n",
        "            'snapshot': t,\n",
        "            'alloc': alloc,\n",
        "            'executed': executed,\n",
        "            'remaining': remaining_order,\n",
        "            'cost': cost\n",
        "        })\n",
        "\n",
        "    avg_fill_price = total_cost / total_executed if total_executed > 0 else None\n",
        "\n",
        "    return execution_log, total_cost, avg_fill_price\n",
        "\n",
        "\n",
        "#---------Smart_Order_Router--------------------\n",
        "def static_cont_kukanov(\n",
        "    snapshots,\n",
        "    timestamps,\n",
        "    total_order_size,\n",
        "    lambda_o,\n",
        "    lambda_u,\n",
        "    theta,\n",
        "    min_gap\n",
        "):\n",
        "    \"\"\"\n",
        "    Greedy Cont-Kukanov allocator with time pacing.\n",
        "    \"\"\"\n",
        "    remaining_order = total_order_size\n",
        "    total_cost = 0.0\n",
        "    total_executed = 0\n",
        "    execution_log = []\n",
        "    last_exec_time = None\n",
        "    start_time = timestamps[0] + timedelta(seconds=2)\n",
        "\n",
        "    for t, (venues, ts) in enumerate(zip(snapshots, timestamps)):\n",
        "        if ts < start_time:\n",
        "            continue\n",
        "        if remaining_order <= 0:\n",
        "            break\n",
        "        if last_exec_time is not None and (ts - last_exec_time).total_seconds() < min_gap:\n",
        "            continue\n",
        "\n",
        "        # Use greedy allocator\n",
        "        alloc, cost = allocate(remaining_order, venues, lambda_o, lambda_u, theta)\n",
        "        #print(f\"  Allocation: {alloc}, cost: {cost}\")\n",
        "        executed = sum(alloc)\n",
        "        if executed == 0:\n",
        "            continue\n",
        "\n",
        "        remaining_order -= executed\n",
        "        total_cost += cost\n",
        "        total_executed += executed\n",
        "        last_exec_time = ts\n",
        "\n",
        "        execution_log.append({\n",
        "            'snapshot': t,\n",
        "            'time': ts,\n",
        "            'alloc': alloc,\n",
        "            'executed': executed,\n",
        "            'remaining': remaining_order,\n",
        "            'cost': cost\n",
        "        })\n",
        "\n",
        "    avg_price = total_cost / total_executed if total_executed > 0 else None\n",
        "    return execution_log, total_cost, avg_price\n",
        "\n",
        "# grid search for parameters\n",
        "def grid_search_parameters(\n",
        "    snapshots,\n",
        "    timestamps,\n",
        "    total_order_size,\n",
        "    lambda_over_vals,\n",
        "    lambda_under_vals,\n",
        "    theta_vals\n",
        "):\n",
        "    best_params = None\n",
        "    best_cost = float('inf')\n",
        "    best_log = None\n",
        "\n",
        "    for lo in lambda_over_vals:\n",
        "        for lu in lambda_under_vals:\n",
        "            for th in theta_vals:\n",
        "                log, cost, _ = static_cont_kukanov(\n",
        "                    snapshots,\n",
        "                    timestamps,\n",
        "                    total_order_size,\n",
        "                    lo,\n",
        "                    lu,\n",
        "                    th,\n",
        "                    min_gap=1\n",
        "                )\n",
        "                if cost < best_cost:\n",
        "                    best_cost = cost\n",
        "                    best_params = {\n",
        "                        'lambda_over': lo,\n",
        "                        'lambda_under': lu,\n",
        "                        'theta_queue': th\n",
        "                    }\n",
        "                    best_log = log\n",
        "\n",
        "    return best_params, best_cost, best_log\n",
        "\n",
        "\n",
        "\n",
        "# plot\n",
        "def plot_cum_costs(logs_dict, filename='results.png'):\n",
        "    n = len(logs_dict)\n",
        "    ncols = 2\n",
        "    nrows = (n + ncols - 1) // ncols\n",
        "    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(10, 4 * nrows), sharex=True)\n",
        "    axes = axes.flatten()\n",
        "\n",
        "    for ax, (label, log) in zip(axes, logs_dict.items()):\n",
        "        snapshots = [entry['snapshot'] for entry in log]\n",
        "        costs = [entry['cost'] for entry in log]\n",
        "        cumulative = [sum(costs[:i+1]) for i in range(len(costs))]\n",
        "\n",
        "        ax.plot(snapshots, cumulative, label=label, linewidth=2)\n",
        "        ax.scatter(snapshots, cumulative, color='black', s=20)\n",
        "        ax.set_title(label)\n",
        "        ax.set_ylabel('Cumulative Cost')\n",
        "        ax.grid(True)\n",
        "        ax.legend()\n",
        "\n",
        "    for i in range(len(logs_dict), len(axes)):\n",
        "        fig.delaxes(axes[i])  # remove unused axes\n",
        "\n",
        "    plt.xlabel('Execution Step')\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(filename)\n",
        "\n",
        "    plt.plot(x_axis, cum_cost, label=label, marker='o')  # explicitly mark points\n",
        "\n",
        "\n",
        "# data preparation\n",
        "def load_data(file_name):\n",
        "    df = pd.read_csv(file_name)\n",
        "    df = df[['ts_event', 'publisher_id', 'ask_px_00', 'ask_sz_00']]\n",
        "\n",
        "    df['ts_event'] = pd.to_datetime(df['ts_event'])\n",
        "    df = df.sort_values(by = ['ts_event','publisher_id'])\n",
        "    df = df.drop_duplicates(subset = ['ts_event','publisher_id'],keep='first')\n",
        "\n",
        "\n",
        "    snapshots = []\n",
        "    timestamps = []\n",
        "    for timestamp, group in df.groupby('ts_event'):\n",
        "        venue = []\n",
        "        for _, row in group.iterrows():\n",
        "            venue.append({\n",
        "                'ask': float(row['ask_px_00']),\n",
        "                'ask_size':float(row['ask_sz_00']),\n",
        "                'fee':0.03,\n",
        "                'rebate': -0.002\n",
        "            })\n",
        "        snapshots.append(venue)\n",
        "        timestamps.append(timestamp)\n",
        "\n",
        "    return timestamps, snapshots\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    timestamps, snapshots = load_data('l1_day.csv')\n",
        "    total_order_size = 5000\n",
        "\n",
        "    # Step 1: Parameter tuning first\n",
        "    best_params, best_cost, best_log = grid_search_parameters(\n",
        "        snapshots, timestamps, total_order_size,\n",
        "        lambda_over_vals=[0.05, 0.1, 0.2],\n",
        "        lambda_under_vals=[0.01, 0.05, 0.1],\n",
        "        theta_vals=[0.005, 0.01]\n",
        "    )\n",
        "\n",
        "    lambda_o = best_params['lambda_over']\n",
        "    lambda_u = best_params['lambda_under']\n",
        "    theta = best_params['theta_queue']\n",
        "\n",
        "\n",
        "    # Step 2: Run all strategies with tuned parameters\n",
        "    logs = {}\n",
        "    logs['BestAskXs'], cost_ba5s, avg_ba5s = best_ask_everyXs(\n",
        "    snapshots,\n",
        "    timestamps,          # ← pass the list you already built\n",
        "    total_order_size,\n",
        "    lambda_o,\n",
        "    lambda_u,\n",
        "    theta,\n",
        "    min_gap=5\n",
        "    )\n",
        "    logs['TWAP'], cost_twap, avg_twap = twap(snapshots, timestamps, total_order_size, lambda_o, lambda_u, theta)\n",
        "    logs['VWAP'], cost_vwap, avg_vwap = vwap(snapshots, total_order_size, lambda_o, lambda_u, theta)\n",
        "    logs['static_cont_kukanov'], cost_2, avg_2 = static_cont_kukanov(snapshots, timestamps, total_order_size, lambda_o, lambda_u, theta, min_gap=10)\n",
        "\n",
        "\n",
        "    def plot_log_cum_costs(logs, filename=None, use_timestamps=False, log_base='natural'):\n",
        "        \"\"\"\n",
        "        Plot log of cumulative execution costs for multiple strategies.\n",
        "        \"\"\"\n",
        "        plt.figure(figsize=(10, 6))\n",
        "\n",
        "        for label, exec_log in logs.items():\n",
        "            if not exec_log:\n",
        "                continue\n",
        "\n",
        "            cum_cost = []\n",
        "            x_axis = []\n",
        "            running_total = 0.0\n",
        "\n",
        "            for i, row in enumerate(exec_log):\n",
        "                running_total += row['cost']\n",
        "                x_val = row['time'] if use_timestamps else i\n",
        "\n",
        "                # Log transformation (safe for 0)\n",
        "                if log_base == 'natural':\n",
        "                    log_cost = np.log1p(running_total)  # ln(1 + x)\n",
        "                elif log_base == 'log10':\n",
        "                    log_cost = np.log10(1 + running_total)\n",
        "                else:\n",
        "                    raise ValueError(\"log_base must be 'natural' or 'log10'\")\n",
        "\n",
        "                cum_cost.append(log_cost)\n",
        "                #x_axis.append(x_val)\n",
        "                x_axis.append(row['time'] if use_timestamps else i)\n",
        "\n",
        "            plt.plot(x_axis, cum_cost, label=label)\n",
        "\n",
        "        plt.title(\"Log of Cumulative Execution Cost per Strategy\")\n",
        "        plt.xlabel(\"Timestamp\" if use_timestamps else \"Execution Step\")\n",
        "        plt.ylabel(\"log(Cumulative Cost)\")\n",
        "        plt.legend()\n",
        "        plt.grid(True)\n",
        "\n",
        "        if filename:\n",
        "            plt.savefig(filename, dpi=300)\n",
        "\n",
        "        plt.show()\n",
        "\n",
        "    plot_log_cum_costs(logs, filename=\"result.png\", use_timestamps=False, log_base='natural')\n",
        "\n",
        "    #---------Final output according to spec------------------\n",
        "    output = {\n",
        "        \"Tuned_Parameters\": best_params,\n",
        "        \"SmartRouter\": {\n",
        "            \"total_cost\": best_cost,\n",
        "            \"avg_fill_price\": best_cost / total_order_size,\n",
        "            \"savings_vs_bestask_bps\": round(10000 * (cost_ba5s - best_cost) / cost_ba5s, 2),\n",
        "            \"savings_vs_twap_bps\": round(10000 * (cost_twap - best_cost) / cost_twap, 2),\n",
        "            \"savings_vs_vwap_bps\": round(10000 * (cost_vwap - best_cost) / cost_vwap, 2)\n",
        "        },\n",
        "        \"BestAsk\": {\n",
        "            \"total_cost\": cost_ba5s,\n",
        "            \"avg_fill_price\": avg_ba5s\n",
        "        },\n",
        "        \"TWAP\": {\n",
        "            \"total_cost\": cost_twap,\n",
        "            \"avg_fill_price\": avg_twap\n",
        "        },\n",
        "        \"VWAP\": {\n",
        "            \"total_cost\": cost_vwap,\n",
        "            \"avg_fill_price\": avg_vwap\n",
        "        }\n",
        "    }\n",
        "\n",
        "    with open(\"result.json\", \"w\") as f:\n",
        "        json.dump(output, f, indent=2)\n",
        "        print(\"Saved JSON output to execution_summary.json\")\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "37bthrL1FATb"
      },
      "execution_count": 141,
      "outputs": []
    }
  ]
}